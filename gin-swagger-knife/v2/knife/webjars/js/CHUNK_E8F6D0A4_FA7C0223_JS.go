package js


import (
	"gin-swagger-knife/constant"
	"gin-swagger-knife/utils"
	"github.com/gin-gonic/gin"

)

func AddRouterOfChunkE8f6d0a4Fa7c0223Js(router *gin.Engine) {
    
    utils.GetJs(router, CHUNK_E8F6D0A4_FA7C0223_JS_BASE64_OR_CONTENT, CHUNK_E8F6D0A4_FA7C0223_JS_RELATIVE_PATH)
    
}

const (
	CHUNK_E8F6D0A4_FA7C0223_JS_RELATIVE_PATH = constant.ROOT_PATH + "/webjars/js/chunk-e8f6d0a4.fa7c0223.js}"
	CHUNK_E8F6D0A4_FA7C0223_JS_BASE64_OR_CONTENT = `(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-e8f6d0a4"],{"576f":function(e,t,_){"use strict";_.d(t,"a",(function(){return r})),_("d3b7"),_("25f0"),_("a4d3"),_("e01a"),_("a15b"),_("159b"),_("b0c0");var n=_("b1c7");function r(e){var t=[];return null!=e&&null!=e&&(a(t),t.push("## "+e.summary),a(t),t.push("**Url**:`"+e.showUrl+"`"),a(t),t.push("**Method**:`"+e.methodType+"`"),a(t),t.push("**produces**:`"+n.a.toString(e.consumes,"*")+"`"),a(t),t.push("**consumes**:`"+n.a.toString(e.produces,"*")+"`"),a(t),t.push("**description**:"+n.a.toString(e.description,"None")),n.a.checkUndefined(e.requestValue)&&(a(t),t.push("**Sample**:"),a(t),t.push("```javascript"),t.push(e.requestValue),t.push("```")),function(e,t){var _=e.reqParameters;a(t),t.push("**Params**:"),a(t),t.push("**Params**:"),_.length>0?(a(t),t.push("| name | description | in    | require | type | schema |"),t.push("| -------- | -------- | ----- | -------- | -------- | ------ |"),function e(t,_,r){null!=t&&null!=t&&t.length>0&&t.forEach((function(t){t.level=r,_.push("|"+o(t)+"|"+n.a.toString(t.description,"")+"|"+n.a.toString(t.in,"")+"|"+n.a.toString(t.require,"")+"|"+n.a.toString(t.type,"")+"|"+n.a.toString(t.schemaValue,"")+"|"),e(t.children,_,t.level+1)}))}(_,t,1)):(a(t),t.push("None"))}(e,t),function(e,t){n.a.checkUndefined(e.responseCodes)&&e.responseCodes.length>0&&(a(t),t.push("**status**:"),a(t),t.push("| code | description | schema |"),t.push("| -------- | -------- | ----- | "),e.responseCodes.forEach((function(e){t.push("|"+n.a.toString(e.code,"")+"|"+n.a.toString(e.description,"")+"|"+n.a.toString(e.schema,"")+"|")})))}(e,t),function(e,t){if(e.multipartResponseSchema){var _=e.multipCodeDatas;n.a.arrNotEmpty(_)&&_.forEach((function(e){a(t),t.push("**code-"+n.a.toString(e.code,"")+"**:"),s(e,t)}))}else s(e.multipData,t)}(e,t)),t.join("\n")}function a(e){e.push("\n")}function s(e,t){(function(e,t){n.a.checkUndefined(e)&&e.length>0&&(a(t),t.push("**Response Header**:"),a(t),t.push("|name | description | type |"),t.push("| -------- | -------- | ----- | "),e.forEach((function(e){t.push("|"+n.a.toString(e.name,"")+"|"+n.a.toString(e.description,"")+"|"+n.a.toString(e.type,"")+"|")})))})(e.responseHeaderParameters,t),a(t),t.push("**Responses**:"),a(t),n.a.arrNotEmpty(e.data)?(t.push("| name | description | type | schema |"),t.push("| -------- | -------- | ----- |----- | "),e.data.forEach((function(e){e.level=1,t.push("|"+o(e)+"|"+n.a.toString(e.description,"")+"|"+n.a.toString(e.type,"")+"|"+n.a.toString(e.schemaValue,"")+"|"),function e(t,_,r){null!=t&&null!=t&&t.length>0&&t.forEach((function(t){t.level=r,_.push("|"+o(t)+"|"+n.a.toString(t.description,"")+"|"+n.a.toString(t.type,"")+"|"+n.a.toString(t.schemaValue,"")+"|"),e(t.children,_,t.level+1)}))}(e.children,t,e.level+1)}))):t.push("None"),a(t),t.push("**Response Sample**:"),e.responseBasicType?(t.push("```text"),t.push(e.responseText),t.push("```")):(t.push("```javascript"),t.push(e.responseValue),t.push("```"))}function o(e){for(var t=[],_=1;_<e.level;_++)t.push("&emsp;&emsp;");return t.join("")+e.name}},7814:function(e,t,_){"use strict";_("8c5b")},"8c5b":function(e,t,_){},b311:function(e,t,_){
/*!
 * clipboard.js v2.0.8
 * https://clipboardjs.com/
 *
 * Licensed MIT © Zeno Rocha
 */
e.exports=function(){var e={134:function(e,t,_){"use strict";_.d(t,{default:function(){return P}});var n=_(279),r=_.n(n),a=_(370),s=_.n(a),o=_(817),i=_.n(o);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var _=0;_<t.length;_++){var n=t[_];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=function(){function e(t){(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),this.resolveOptions(t),this.initSelection()}return function(e,t,_){t&&l(e.prototype,t),_&&l(e,_)}(e,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"createFakeElement",value:function(){var e="rtl"===document.documentElement.getAttribute("dir");this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[e?"right":"left"]="-9999px";var t=window.pageYOffset||document.documentElement.scrollTop;return this.fakeElem.style.top="".concat(t,"px"),this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.fakeElem}},{key:"selectFake",value:function(){var e=this,t=this.createFakeElement();this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.container.appendChild(t),this.selectedText=i()(t),this.copyText(),this.removeFake()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=i()(this.target),this.copyText()}},{key:"copyText",value:function(){var e;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),document.activeElement.blur(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==c(e)||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),e}();function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var _=0;_<t.length;_++){var n=t[_];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var _,n=E(e);if(t){var r=E(this).constructor;_=Reflect.construct(n,arguments,r)}else _=n.apply(this,arguments);return h(this,_)}}function h(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function y(e,t){var _="data-clipboard-".concat(e);if(t.hasAttribute(_))return t.getAttribute(_)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(_,e);var t=f(_);function _(e,n){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,_),(r=t.call(this)).resolveOptions(n),r.listenClick(e),r}return function(e,t,_){t&&d(e.prototype,t),_&&d(e,_)}(_,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===p(e.container)?e.container:document.body}},{key:"listenClick",value:function(e){var t=this;this.listener=s()(e,"click",(function(e){return t.onClick(e)}))}},{key:"onClick",value:function(e){var t=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new u({action:this.action(t),target:this.target(t),text:this.text(t),container:this.container,trigger:t,emitter:this})}},{key:"defaultAction",value:function(e){return y("action",e)}},{key:"defaultTarget",value:function(e){var t=y("target",e);if(t)return document.querySelector(t)}},{key:"defaultText",value:function(e){return y("text",e)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],t="string"==typeof e?[e]:e,_=!!document.queryCommandSupported;return t.forEach((function(e){_=_&&!!document.queryCommandSupported(e)})),_}}]),_}(r())},828:function(e){if("undefined"!=typeof Element&&!Element.prototype.matches){var t=Element.prototype;t.matches=t.matchesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector||t.webkitMatchesSelector}e.exports=function(e,t){for(;e&&9!==e.nodeType;){if("function"==typeof e.matches&&e.matches(t))return e;e=e.parentNode}}},438:function(e,t,_){var n=_(828);function r(e,t,_,n,r){var s=a.apply(this,arguments);return e.addEventListener(_,s,r),{destroy:function(){e.removeEventListener(_,s,r)}}}function a(e,t,_,r){return function(_){_.delegateTarget=n(_.target,t),_.delegateTarget&&r.call(e,_)}}e.exports=function(e,t,_,n,a){return"function"==typeof e.addEventListener?r.apply(null,arguments):"function"==typeof _?r.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,(function(e){return r(e,t,_,n,a)})))}},879:function(e,t){t.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},t.nodeList=function(e){var _=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===_||"[object HTMLCollection]"===_)&&"length"in e&&(0===e.length||t.node(e[0]))},t.string=function(e){return"string"==typeof e||e instanceof String},t.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},370:function(e,t,_){var n=_(879),r=_(438);e.exports=function(e,t,_){if(!e&&!t&&!_)throw new Error("Missing required arguments");if(!n.string(t))throw new TypeError("Second argument must be a String");if(!n.fn(_))throw new TypeError("Third argument must be a Function");if(n.node(e))return function(e,t,_){return e.addEventListener(t,_),{destroy:function(){e.removeEventListener(t,_)}}}(e,t,_);if(n.nodeList(e))return function(e,t,_){return Array.prototype.forEach.call(e,(function(e){e.addEventListener(t,_)})),{destroy:function(){Array.prototype.forEach.call(e,(function(e){e.removeEventListener(t,_)}))}}}(e,t,_);if(n.string(e))return function(e,t,_){return r(document.body,e,t,_)}(e,t,_);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}},817:function(e){e.exports=function(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var _=e.hasAttribute("readonly");_||e.setAttribute("readonly",""),e.select(),e.setSelectionRange(0,e.value.length),_||e.removeAttribute("readonly"),t=e.value}else{e.hasAttribute("contenteditable")&&e.focus();var n=window.getSelection(),r=document.createRange();r.selectNodeContents(e),n.removeAllRanges(),n.addRange(r),t=n.toString()}return t}},279:function(e){function t(){}t.prototype={on:function(e,t,_){var n=this.e||(this.e={});return(n[e]||(n[e]=[])).push({fn:t,ctx:_}),this},once:function(e,t,_){var n=this;function r(){n.off(e,r),t.apply(_,arguments)}return r._=t,this.on(e,r,_)},emit:function(e){for(var t=[].slice.call(arguments,1),_=((this.e||(this.e={}))[e]||[]).slice(),n=0,r=_.length;n<r;n++)_[n].fn.apply(_[n].ctx,t);return this},off:function(e,t){var _=this.e||(this.e={}),n=_[e],r=[];if(n&&t)for(var a=0,s=n.length;a<s;a++)n[a].fn!==t&&n[a].fn._!==t&&r.push(n[a]);return r.length?_[e]=r:delete _[e],this}},e.exports=t,e.exports.TinyEmitter=t}},t={};function _(n){if(t[n])return t[n].exports;var r=t[n]={exports:{}};return e[n](r,r.exports,_),r.exports}return _.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return _.d(t,{a:t}),t},_.d=function(e,t){for(var n in t)_.o(t,n)&&!_.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},_.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},_(134)}().default},b9bf:function(e,t,_){"use strict";_.d(t,"a",(function(){return r})),_("d3b7"),_("25f0"),_("a4d3"),_("e01a"),_("a15b"),_("159b"),_("b0c0");var n=_("b1c7");function r(e){var t=[];return null!=e&&null!=e&&(a(t),t.push("## "+e.summary),a(t),t.push("**接口地址**:`"+e.showUrl+"`"),a(t),t.push("**请求方式**:`"+e.methodType+"`"),a(t),t.push("**请求数据类型**:`"+n.a.toString(e.consumes,"*")+"`"),a(t),t.push("**响应数据类型**:`"+n.a.toString(e.produces,"*")+"`"),a(t),t.push("**接口描述**:"+n.a.toString(e.description,"暂无")),n.a.checkUndefined(e.requestValue)&&(a(t),t.push("**请求示例**:"),a(t),t.push("```javascript"),t.push(e.requestValue),t.push("```")),function(e,t){var _=e.reqParameters;a(t),t.push("**请求参数**:"),a(t),t.push("**请求参数**:"),_.length>0?(a(t),t.push("| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |"),t.push("| -------- | -------- | ----- | -------- | -------- | ------ |"),function e(t,_,r){null!=t&&null!=t&&t.length>0&&t.forEach((function(t){t.level=r,_.push("|"+o(t)+"|"+n.a.toString(t.description,"")+"|"+n.a.toString(t.in,"")+"|"+n.a.toString(t.require,"")+"|"+n.a.toString(t.type,"")+"|"+n.a.toString(t.schemaValue,"")+"|"),e(t.children,_,t.level+1)}))}(_,t,1)):(a(t),t.push("暂无"))}(e,t),function(e,t){n.a.checkUndefined(e.responseCodes)&&e.responseCodes.length>0&&(a(t),t.push("**响应状态**:"),a(t),t.push("| 状态码 | 说明 | schema |"),t.push("| -------- | -------- | ----- | "),e.responseCodes.forEach((function(e){t.push("|"+n.a.toString(e.code,"")+"|"+n.a.toString(e.description,"")+"|"+n.a.toString(e.schema,"")+"|")})))}(e,t),function(e,t){if(e.multipartResponseSchema){var _=e.multipCodeDatas;n.a.arrNotEmpty(_)&&_.forEach((function(e){a(t),t.push("**响应状态码-"+n.a.toString(e.code,"")+"**:"),s(e,t)}))}else s(e.multipData,t)}(e,t)),t.join("\n")}function a(e){e.push("\n")}function s(e,t){(function(e,t){n.a.checkUndefined(e)&&e.length>0&&(a(t),t.push("**响应Header**:"),a(t),t.push("| 参数名称 | 参数说明 | 数据类型 |"),t.push("| -------- | -------- | ----- | "),e.forEach((function(e){t.push("|"+n.a.toString(e.name,"")+"|"+n.a.toString(e.description,"")+"|"+n.a.toString(e.type,"")+"|")})))})(e.responseHeaderParameters,t),a(t),t.push("**响应参数**:"),a(t),n.a.arrNotEmpty(e.data)?(t.push("| 参数名称 | 参数说明 | 类型 | schema |"),t.push("| -------- | -------- | ----- |----- | "),e.data.forEach((function(e){e.level=1,t.push("|"+o(e)+"|"+n.a.toString(e.description,"")+"|"+n.a.toString(e.type,"")+"|"+n.a.toString(e.schemaValue,"")+"|"),function e(t,_,r){null!=t&&null!=t&&t.length>0&&t.forEach((function(t){t.level=r,_.push("|"+o(t)+"|"+n.a.toString(t.description,"")+"|"+n.a.toString(t.type,"")+"|"+n.a.toString(t.schemaValue,"")+"|"),e(t.children,_,t.level+1)}))}(e.children,t,e.level+1)}))):t.push("暂无"),a(t),t.push("**响应示例**:"),e.responseBasicType?(t.push("```text"),t.push(e.responseText),t.push("```")):(t.push("```javascript"),t.push(e.responseValue),t.push("```"))}function o(e){for(var t=[],_=1;_<e.level;_++)t.push("&emsp;&emsp;");return t.join("")+e.name}},bd08:function(module,__webpack_exports__,__webpack_require__){"use strict";var D_develop_knife4j_knife4j_vue_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("5530"),core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("d3b7"),core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__),core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("3ca3"),core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__),core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("ddb0"),core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3__),core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("4de4"),core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_4__),core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("caad"),core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_5__),core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("2532"),core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_6__),core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("99af"),core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_7__),core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("b0c0"),core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8__),core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("d81d"),core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_9__),core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("b64b"),core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_10__),core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("4d63"),core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_11___default=__webpack_require__.n(core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_11__),core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("ac1f"),core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_12___default=__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_12__),core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__("25f0"),core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_13___default=__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_13__),core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__("159b"),core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_14___default=__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_14__),core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__("5319"),core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_15___default=__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_15__),core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__("2ca0"),core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_16___default=__webpack_require__.n(core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_16__),core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__("4e82"),core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_17___default=__webpack_require__.n(core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_17__),core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__("a4d3"),core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_18___default=__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_18__),core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__("e01a"),core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_19___default=__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_19__),core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__("a15b"),core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_20___default=__webpack_require__.n(core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_20__),_core_utils__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__("b1c7"),_store_constants__WEBPACK_IMPORTED_MODULE_22__=__webpack_require__("5609"),_components_officeDocument_markdownSingleTransform__WEBPACK_IMPORTED_MODULE_23__=__webpack_require__("b9bf"),_components_officeDocument_markdownSingleTransformUS__WEBPACK_IMPORTED_MODULE_24__=__webpack_require__("576f"),clipboard__WEBPACK_IMPORTED_MODULE_25__=__webpack_require__("b311"),clipboard__WEBPACK_IMPORTED_MODULE_25___default=__webpack_require__.n(clipboard__WEBPACK_IMPORTED_MODULE_25__),lodash_uniqueId__WEBPACK_IMPORTED_MODULE_26__=__webpack_require__("98dc"),lodash_uniqueId__WEBPACK_IMPORTED_MODULE_26___default=__webpack_require__.n(lodash_uniqueId__WEBPACK_IMPORTED_MODULE_26__),lodash_isObject__WEBPACK_IMPORTED_MODULE_27__=__webpack_require__("1a8c"),lodash_isObject__WEBPACK_IMPORTED_MODULE_27___default=__webpack_require__.n(lodash_isObject__WEBPACK_IMPORTED_MODULE_27__),lodash_has__WEBPACK_IMPORTED_MODULE_28__=__webpack_require__("3852"),lodash_has__WEBPACK_IMPORTED_MODULE_28___default=__webpack_require__.n(lodash_has__WEBPACK_IMPORTED_MODULE_28__),lodash_keys__WEBPACK_IMPORTED_MODULE_29__=__webpack_require__("ec69"),lodash_keys__WEBPACK_IMPORTED_MODULE_29___default=__webpack_require__.n(lodash_keys__WEBPACK_IMPORTED_MODULE_29__),lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_30__=__webpack_require__("0644"),lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_30___default=__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_30__);__webpack_exports__.a={name:"Document",components:{editor:__webpack_require__("7c9e"),DataType:function(){return __webpack_require__.e("chunk-2d0bd799").then(__webpack_require__.bind(null,"2bc6"))},EditorShow:function(){return Promise.all([__webpack_require__.e("chunk-3b888a65"),__webpack_require__.e("chunk-3ec4aaa8"),__webpack_require__.e("chunk-2d0af44e")]).then(__webpack_require__.bind(null,"0e36"))}},props:{api:{type:Object,required:!0},swaggerInstance:{type:Object,required:!0}},data:function(){return{content:"<span>Hello</span>",contentType:"*/*",columns:[],responseHeaderColumns:[],responseStatuscolumns:[],responseParametersColumns:[],expanRows:!0,multipCode:!1,multipCodeDatas:[],multipData:{},page:!1,reqParameters:[]}},created:function(){var e=this,t=_store_constants__WEBPACK_IMPORTED_MODULE_22__.a.globalTreeTableModelParams+this.swaggerInstance.id,_=this.swaggerInstance.swaggerTreeTableModels;this.$Knife4jModels.setValue(t,_),this.initI18n(),this.initRequestParams(),this.initResponseCodeParams(),setTimeout((function(){e.copyApiAddress(),e.copyApiMarkdown(),e.copyApiUrl()}),1500)},computed:{language:function(){return this.$store.state.globals.language},swagger:function(){return this.$store.state.globals.swagger}},watch:{language:function(e,t){this.initI18n()}},methods:{getCurrentI18nInstance:function(){return this.$i18n.messages[this.language]},initI18n:function(){var e=this.getCurrentI18nInstance();this.columns=e.table.documentRequestColumns,this.responseStatuscolumns=e.table.documentResponseStatusColumns,this.responseHeaderColumns=e.table.documentResponseHeaderColumns,this.responseParametersColumns=e.table.documentResponseColumns},copyApiUrl:function(){var e=this,t="btnCopyMethod"+this.api.id,_=this.api.showUrl,n=new clipboard__WEBPACK_IMPORTED_MODULE_25___default.a("#"+t,{text:function(){return _}});n.on("success",(function(){var t=e.getCurrentI18nInstance().message.copy.method.success;e.$message.info(t)})),n.on("error",(function(t){var _=e.getCurrentI18nInstance().message.copy.method.fail;e.$message.info(_)}))},copyApiAddress:function(){var e=this,t="btnCopyAddress"+this.api.id,_=new clipboard__WEBPACK_IMPORTED_MODULE_25___default.a("#"+t,{text:function(){return window.location.href}});_.on("success",(function(t){var _=e.getCurrentI18nInstance().message.copy.url.success;e.$message.info(_)})),_.on("error",(function(t){var _=e.getCurrentI18nInstance().message.copy.url.fail;e.$message.info(_)}))},copyApiMarkdown:function(){var e=this,t="btnCopyMarkdown"+this.api.id,_=Object(D_develop_knife4j_knife4j_vue_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__.a)(Object(D_develop_knife4j_knife4j_vue_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__.a)({},e.api),{},{reqParameters:e.reqParameters,multipCodeDatas:e.multipCodeDatas,multipData:e.multipData}),n=new clipboard__WEBPACK_IMPORTED_MODULE_25___default.a("#"+t,{text:function(){var t=e.getCurrentI18nInstance();return"zh"===t.lang?Object(_components_officeDocument_markdownSingleTransform__WEBPACK_IMPORTED_MODULE_23__.a)(_):"us"===t.lang?Object(_components_officeDocument_markdownSingleTransformUS__WEBPACK_IMPORTED_MODULE_24__.a)(_):void 0}});n.on("success",(function(t){var _=e.getCurrentI18nInstance().message.copy.document.success;e.$message.info(_)})),n.on("error",(function(t){var _=e.getCurrentI18nInstance().message.copy.document.fail;e.$message.info(_)}))},filterChildrens:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],_=arguments.length>2?arguments[2]:void 0;if(0===e.length)return t;var n=this,r=_?t.filter((function(t){return!e.includes("".concat(_,".").concat(t.name))})):t.filter((function(t){return!e.includes(t.name)}));return r.map((function(t){return t.id=lodash_uniqueId__WEBPACK_IMPORTED_MODULE_26___default()("param"),t.children&&(t.children=n.filterChildrens(e,t.children,t.name)),t}))},initRequestParams:function initRequestParams(){var _this=this,key=_store_constants__WEBPACK_IMPORTED_MODULE_22__.a.globalTreeTableModelParams+this.swaggerInstance.id,data=[],that=this,apiInfo=this.api;_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.strNotBlank(apiInfo.contentType)&&(this.contentType=apiInfo.contentType),"application/x-www-form-urlencoded;charset=UTF-8"==apiInfo.contentType&&(this.contentType="application/x-www-form-urlencoded");var tmpKeys=Object.keys(apiInfo.ignoreParameters||{}),ignoreParameterAllKeys=[],reg=new RegExp("\\[0\\]","gm");if(null!=tmpKeys&&tmpKeys.length>0&&tmpKeys.forEach((function(e){ignoreParameterAllKeys.push(e),e.indexOf("[0]")>-1&&ignoreParameterAllKeys.push(e.replace(reg,""))})),null!=apiInfo.parameters&&apiInfo.parameters.length>0){var dx=apiInfo.parameters.filter((function(e){return e.name.indexOf("[0]")>-1?!(ignoreParameterAllKeys.length>0)||ignoreParameterAllKeys.filter((function(t){return!e.name.startsWith(t)})).length>0:!ignoreParameterAllKeys.includes(e.name)}));data=data.concat(dx)}null!=apiInfo.refTreetableparameters&&apiInfo.refTreetableparameters.length>0&&apiInfo.refTreetableparameters.forEach((function(e){data=data.concat(e.params)})),null!=data&&data.sort((function(e,t){return t.require-e.require}));var reqParameters=[];if(null!=data&&data.length>0&&data.forEach((function(param){if("-1"==param.pid){if(param.children=null,param.schema){var schemaName=param.schemaValue;if(_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.checkUndefined(schemaName)&&that.$Knife4jModels.exists(key,schemaName)){var model=that.$Knife4jModels.getByModelName(key,schemaName);if(model=that.swagger.analysisDefinitionRefTableModel(that.swaggerInstance.id,model),model&&model.params){var childrens=model.params.filter((function(_ref){var name=_ref.name;return!(ignoreParameterAllKeys.includes(name)||ignoreParameterAllKeys.includes(name+"[0]")||ignoreParameterAllKeys.includes("".concat(param.name,".").concat(name))||ignoreParameterAllKeys.some((function(key){return new RegExp("^(".concat(key,"$|").concat(key,"[.[])")).test(name)||eval("/"+key+"/g").test(name)})))})).map((function(e){var t=that.copyNewParameter(e);if(t.pid=param.id,t.children){var _=JSON.parse(JSON.stringify(t.children)),n=ignoreParameterAllKeys.map((function(e){return e.startsWith("".concat(param.name,".").concat(t.name,"."))?e.replace("".concat(param.name,".").concat(t.name,"."),""):e.startsWith("".concat(t.name,"."))?e.replace("".concat(t.name,"."),""):null})).filter(Boolean);t.children=that.filterChildrens(n,_)}return t}));param.children=childrens.length>0?childrens:null}}}reqParameters.push(param)}})),null!=apiInfo.includeParameters){var tmpIncludeKeys=Object.keys(apiInfo.includeParameters||{}),bodyParam=reqParameters.filter((function(e){return"body"==e.in})).length;if(tmpIncludeKeys.length>0&&bodyParam>0){var includeParameters=[],rootKeys=[];this.deepRootKeys(tmpIncludeKeys,rootKeys),reqParameters.forEach((function(e){if(rootKeys.includes(e.name)){var t=lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_30___default()(e);t.children=null,null!=e.children&&e.children.length>0&&(t.children=new Array,_this.deepIncludeParam(t.name,t,e.children,tmpIncludeKeys,rootKeys)),includeParameters.push(t)}else tmpIncludeKeys.includes(e.name)&&((t=lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_30___default()(e)).children=null,null!=e.children&&e.children.length>0&&(t.children=new Array,_this.deepIncludeParam(t.name,t,e.children,tmpIncludeKeys,rootKeys)),includeParameters.push(t))})),that.reqParameters=includeParameters}else that.reqParameters=reqParameters}else that.reqParameters=reqParameters},deepRootKeys:function(e,t){var _=[];e.forEach((function(e){var n=e.substring(0,e.lastIndexOf("."));n.indexOf(".")>-1&&_.push(n),t.includes(n)||t.push(n)})),_.length>0&&this.deepRootKeys(_,t)},deepIncludeParam:function(e,t,_,n,r){var a=this;null!=_&&_.length>0&&_.forEach((function(_){var s=e+"."+_.name;if(r.includes(s)){var o=lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_30___default()(_);o.children=null,t.children.push(o),_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.arrNotEmpty(_.children)&&(o.children=new Array,a.deepIncludeParam(s,o,_.children,n,r))}else n.includes(s)&&t.children.push(_)}))},copyNewParameter:function(e){var t=Object.assign({},e);return t.id=lodash_uniqueId__WEBPACK_IMPORTED_MODULE_26___default()("param"),function e(t){return t?t.map((function(t){t.id=lodash_uniqueId__WEBPACK_IMPORTED_MODULE_26___default()("param"),e(t.children)})):null}(t.children),t},deepTreeTableSchemaModel:function(e,t,_){var n=this;if(_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.checkUndefined(e.schemaValue)){var r=t[e.schemaValue];_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.checkUndefined(r)&&(_.parentTypes.push(e.schemaValue),_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.arrNotEmpty(r.params)&&r.params.forEach((function(r){var a={childrenTypes:r.childrenTypes,def:r.def,description:r.description,enum:r.enum,example:r.example,id:r.id,ignoreFilterName:r.ignoreFilterName,in:r.in,level:r.level,name:r.name,parentTypes:r.parentTypes,pid:r.pid,readOnly:r.readOnly,require:r.require,schema:r.schema,schemaValue:r.schemaValue,show:r.show,txtValue:r.txtValue,type:r.type,validateInstance:r.validateInstance,validateStatus:r.validateStatus,value:r.value};a.pid=e.id,e.children.push(a),a.schema&&-1==_.parentTypes.indexOf(a.schemaValue)&&(a.children=[],n.deepTreeTableSchemaModel(a,t,_),0==a.children.length&&(a.children=null))})))}},findModelChildren:function(e,t){var _=this;null!=t&&null!=t&&t.length>0&&t.forEach((function(n){n.pid==e.id&&(n.children=[],_.findModelChildren(n,t),0==n.children.length&&(n.children=null),e.children.push(n))}))},initResponseCodeParams:function(){var e=this,t=_store_constants__WEBPACK_IMPORTED_MODULE_22__.a.globalTreeTableModelParams+this.swaggerInstance.id;e.multipCode=this.api.multipartResponseSchema,e.multipCodeDatas=[],e.multipData={};var _=this.api.responseCodes;if(null!=_&&null!=_){_.forEach((function(_){if(null!=_.schema&&null!=_.schema){var n=[];null!=_.responseParameters&&_.responseParameters.length>0&&(n=n.concat(_.responseParameters)),null!=_.responseTreetableRefParameters&&_.responseTreetableRefParameters.length>0&&_.responseTreetableRefParameters.forEach((function(e){n=n.concat(e.params)}));var r=[];null!=n&&n.length>0&&n.forEach((function(_){if("-1"==_.pid){if(_.children=[],_.schema){var n=_.schemaValue;if(_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.checkUndefined(n)&&e.$Knife4jModels.exists(t,n)){var a=e.$Knife4jModels.getByModelName(t,n);(a=e.swagger.analysisDefinitionRefTableModel(e.swaggerInstance.id,a))&&a.params&&(_.children=a.params.map((function(t){var n=e.copyNewParameter(t);return n.pid=_.id,n})))}}0==_.children.length&&(_.children=null),r.push(_)}}));var a=Object(D_develop_knife4j_knife4j_vue_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__.a)(Object(D_develop_knife4j_knife4j_vue_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__.a)({},_),{},{data:r});e.multipCode||(e.multipData=a),e.multipCodeDatas.push(a)}}));var n=Object.keys(e.multipData);if(_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.arrNotEmpty(_)&&!_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.arrNotEmpty(n)){var r=_[0];if(_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.strNotBlank(r.schemaTitle)){var a=Object(D_develop_knife4j_knife4j_vue_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__.a)(Object(D_develop_knife4j_knife4j_vue_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__.a)({},r),{},{data:[]});e.multipData=a}}}},showResponseEditFieldDescription:function(e){if(this.api.multipartResponseSchema){var t=this.multipCodeDatas[0],_="knife4jDocumentShowEditor"+this.api.id+t.code;this.showEditorFieldAnyWay(_)}else _="knife4jDocumentShowEditor"+this.api.id,this.showEditorFieldAnyWay(_)},multipartTabCodeChanges:function(e){var t=this;setTimeout((function(){var _="knife4jDocumentShowEditor"+t.api.id+e;t.showEditorFieldAnyWay(_)}),1e3)},showEditorFieldAnyWay:function(e){var t=this.swaggerInstance,_=this.api.getHttpSuccessCodeObject(),n=document.getElementById(e),r=[],a=n.getElementsByClassName("ace_text-layer"),s=n.querySelector(".ace_print-margin").style.left;if(a.length>0)for(var o=a[0].getElementsByClassName("ace_line"),i=0;i<o.length;i++){var c=o[i],l=c.getElementsByClassName("ace_variable"),u=null;if(_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.arrNotEmpty(l)){u=_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.toString(l[0].innerHTML,"").replace(/^"(.*)"$/g,"$1");var p=c.getElementsByClassName("knife4j-debug-editor-field-description");if(!_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.arrNotEmpty(p)&&null!=_){var d=document.createElement("span");d.className="knife4j-debug-editor-field-description",d.innerHTML=_.responseDescriptionFind(r,u,t),d.style.left=s,c.appendChild(d)}}var m=c.getElementsByClassName("ace_paren");if(_core_utils__WEBPACK_IMPORTED_MODULE_21__.a.arrNotEmpty(m)){for(var f=[],h=0;h<m.length;h++)f.push(m[h].innerHTML);switch(f.join("")){case"[":case"{":r.push(u||0);break;case"}":case"]":r.pop()}}}}}}},eeba:function(e,t,_){"use strict";_.r(t);var n=_("bd08").a,r=(_("7814"),_("2877")),a=Object(r.a)(n,(function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("div",{staticClass:"document"},[_("a-row",[_("a-row",{staticClass:"knife4j-api-title"},[_("a-col",{attrs:{span:18}},[e.api.deprecated?_("span",{staticClass:"knife4j-menu-api-deprecated"},[e._v(" "+e._s(e.api.summary)+" ")]):_("span",[e._v(" "+e._s(e.api.summary)+" ")])]),_("a-col",{staticClass:"knife4j-api-copy-address",attrs:{span:2,id:"btnCopyMethod"+e.api.id},domProps:{innerHTML:e._s(e.$t("doc.copyMethod"))}},[e._v("复制接口")]),_("a-col",{staticClass:"knife4j-api-copy-address",attrs:{span:2,id:"btnCopyMarkdown"+e.api.id},domProps:{innerHTML:e._s(e.$t("doc.copy"))}},[e._v("复制文档")]),_("a-col",{staticClass:"knife4j-api-copy-address",attrs:{span:2,id:"btnCopyAddress"+e.api.id},domProps:{innerHTML:e._s(e.$t("doc.copyHash"))}},[e._v("复制地址")])],1),_("a-row",{class:"knife4j-api-"+e.api.methodType.toLowerCase()},[_("div",{staticClass:"knife4j-api-summary"},[_("span",{staticClass:"knife4j-api-summary-method"},[e.api.securityFlag?_("a-icon",{staticStyle:{"font-size":"16px"},attrs:{type:"unlock"}}):e._e(),e._v(" "+e._s(e.api.methodType))],1),_("span",{staticClass:"knife4j-api-summary-path"},[e._v(e._s(e.api.showUrl))])])]),_("a-row",{staticClass:"knife4j-api-row"},[_("a-col",{attrs:{span:12}},[_("a-row",[_("a-col",{staticClass:"api-basic-title",attrs:{span:6},domProps:{innerHTML:e._s(e.$t("doc.produces"))}},[e._v("请求数据类型")]),e._v(" "+e._s(e.contentType)+" ")],1)],1),_("a-col",{attrs:{span:12}},[_("a-row",[_("a-col",{staticClass:"api-basic-title",attrs:{span:6},domProps:{innerHTML:e._s(e.$t("doc.consumes"))}},[e._v("响应数据类型")]),e._v(" "+e._s(e.api.produces)+" ")],1)],1)],1)],1),e.api.author?_("div",[_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.author"))}},[e._v(" 开发者 ")]),e.api.author?_("div",{staticClass:"api-body-desc",domProps:{innerHTML:e._s(e.api.author)}}):e._e()]):e._e(),e.api.description?_("div",[_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.des"))}},[e._v(" 接口描述 ")]),e.api.description?_("div",{staticClass:"api-body-desc",domProps:{innerHTML:e._s(e.api.description)}}):e._e()]):e._e(),e.api.requestValue?_("div",[_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.requestExample"))}},[e._v(" 请求示例 ")]),_("editor-show",{attrs:{value:e.api.requestValue,xmlMode:e.api.xmlRequest}})],1):e._e(),_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.params"))}},[e._v(" 请求参数 ")]),_("a-table",{attrs:{defaultExpandAllRows:e.expanRows,columns:e.columns,dataSource:e.reqParameters,rowKey:"id",size:"small",pagination:e.page},scopedSlots:e._u([{key:"descriptionValueTemplate",fn:function(t,n){return[_("span",{domProps:{innerHTML:e._s(t)}}),n.example?_("span",[e._v(",示例值("+e._s(n.example)+")")]):e._e()]}},{key:"requireTemplate",fn:function(t){return[t?_("span",{staticStyle:{color:"red"}},[e._v(e._s(t.toLocaleString()))]):_("span",[e._v(e._s(t.toLocaleString()))])]}},{key:"typeTemplate",fn:function(t){return[_("span",{class:"knife4j-request-"+t},[e._v(e._s(t))])]}},{key:"datatypeTemplate",fn:function(e,t){return[_("data-type",{attrs:{text:e,record:t}})]}}])}),_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.response"))}},[e._v(" 响应状态 ")]),_("a-table",{attrs:{defaultExpandAllRows:e.expanRows,columns:e.responseStatuscolumns,dataSource:e.api.responseCodes,rowKey:"code",size:"small",pagination:e.page},scopedSlots:e._u([{key:"descriptionTemplate",fn:function(t){return[_("div",{domProps:{innerHTML:e._s(t)}})]}},{key:"schemaTemplate",fn:function(t,n){return[null!=t?_("span",{domProps:{innerHTML:e._s(t)}}):null!=n.schemaTitle?_("span",{domProps:{innerHTML:e._s(n.schemaTitle)}}):e._e()]}}])}),e.api.multipartResponseSchema?_("div",[_("a-tabs",{on:{change:e.multipartTabCodeChanges}},e._l(e.multipCodeDatas,(function(t){return _("a-tab-pane",{key:t.code,attrs:{tab:t.code}},[t.responseHeaderParameters?_("div",[_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.responseHeaderParams"))}},[e._v(" 响应Header ")]),_("a-table",{attrs:{defaultExpandAllRows:e.expanRows,columns:e.responseHeaderColumns,dataSource:t.responseHeaderParameters,rowKey:"id",size:"small",pagination:e.page}})],1):e._e(),_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.responseParams"))}},[e._v(" 响应参数 ")]),_("a-table",{attrs:{defaultExpandAllRows:e.expanRows,columns:e.responseParametersColumns,dataSource:t.data,rowKey:"id",size:"small",pagination:e.page},scopedSlots:e._u([{key:"descriptionTemplate",fn:function(t){return[_("span",{domProps:{innerHTML:e._s(t)}})]}}],null,!0)}),_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.responseExample"))}},[e._v(" 响应示例 ")]),_("a-row",{attrs:{id:"knife4jDocumentShowEditor"+e.api.id+t.code}},[_("editor-show",{attrs:{value:t.responseBasicType?t.responseText:t.responseValue},on:{showDescription:e.showResponseEditFieldDescription}})],1)],1)})),1)],1):_("div",[e.api.responseHeaderParameters?_("div",[_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.responseHeaderParams"))}},[e._v(" 响应Header ")]),_("a-table",{attrs:{defaultExpandAllRows:e.expanRows,columns:e.responseHeaderColumns,dataSource:e.api.responseHeaderParameters,rowKey:"id",size:"small",pagination:e.page}})],1):e._e(),_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.responseParams"))}},[e._v(" 响应参数 ")]),_("a-table",{attrs:{defaultExpandAllRows:e.expanRows,columns:e.responseParametersColumns,dataSource:e.multipData.data,rowKey:"id",size:"small",pagination:e.page},scopedSlots:e._u([{key:"descriptionTemplate",fn:function(t){return[_("span",{domProps:{innerHTML:e._s(t)}})]}}])}),_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.responseExample"))}},[e._v(" 响应示例 ")]),_("a-row",{attrs:{id:"knife4jDocumentShowEditor"+e.api.id}},[_("editor-show",{attrs:{value:e.multipData.responseBasicType?e.multipData.responseText:e.multipData.responseValue},on:{showDescription:e.showResponseEditFieldDescription}})],1)],1)],1)}),[],!1,null,"2e1642ac",null);t.default=a.exports}}]);`
)






