package js


import (
	"gin-swagger-knife/constant"
	"gin-swagger-knife/utils"
	"github.com/gin-gonic/gin"

)

func AddRouterOfChunkAdb9e944Fa692c2aJs(router *gin.Engine) {
    
    utils.GetJs(router, CHUNK_ADB9E944_FA692C2A_JS_BASE64_OR_CONTENT, CHUNK_ADB9E944_FA692C2A_JS_RELATIVE_PATH)
    
}

const (
	CHUNK_ADB9E944_FA692C2A_JS_RELATIVE_PATH = constant.ROOT_PATH + "/webjars/js/chunk-adb9e944.fa692c2a.js}"
	CHUNK_ADB9E944_FA692C2A_JS_BASE64_OR_CONTENT = `KHdpbmRvdy53ZWJwYWNrSnNvbnA9d2luZG93LndlYnBhY2tKc29ucHx8W10pLnB1c2goW1siY2h1bmstYWRiOWU5NDQiXSx7IjE5YWEwIjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO24ucihlKTt2YXIgbz0obigiZDNiNyIpLG4oIjNjYTMiKSxuKCJkZGIwIiksbigiYjBjMCIpLG4oIjJiM2QiKSxuKCI5ODYxIiksbigiYjFjNyIpKSxyPW4oImIzMTEiKSxpPW4ubihyKSxhPXtuYW1lOiJEb2N1bWVudCIsY29tcG9uZW50czp7ZWRpdG9yOm4oIjdjOWUiKSxFZGl0b3JTaG93OmZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UuYWxsKFtuLmUoImNodW5rLTNiODg4YTY1Iiksbi5lKCJjaHVuay0zZWM0YWFhOCIpLG4uZSgiY2h1bmstMmQwYWY0NGUiKV0pLnRoZW4obi5iaW5kKG51bGwsIjBlMzYiKSl9fSxwcm9wczp7YXBpOnt0eXBlOk9iamVjdCxyZXF1aXJlZDohMH0sc3dhZ2dlckluc3RhbmNlOnt0eXBlOk9iamVjdCxyZXF1aXJlZDohMH19LGNvbXB1dGVkOntsYW5ndWFnZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5nbG9iYWxzLmxhbmd1YWdlfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntvcGVuQXBpUmF3OiIiLG5hbWU6Ik9wZW5BUEkuanNvbiJ9fSxjcmVhdGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLm9wZW5BcGlSYXc9by5hLmpzb241c3RyaW5naWZ5KHRoaXMuYXBpLm9wZW5BcGlSYXcpLHRoaXMubmFtZT10aGlzLmFwaS5zdW1tYXJ5KyJfT3BlbkFQSS5qc29uIixzZXRUaW1lb3V0KChmdW5jdGlvbigpe3QuY29weU9wZW5BcGkoKX0pLDUwMCl9LG1ldGhvZHM6e2NoYW5nZTpmdW5jdGlvbih0KXt0aGlzLm9wZW5BcGlSYXc9dH0sZ2V0Q3VycmVudEkxOG5JbnN0YW5jZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRpMThuLm1lc3NhZ2VzW3RoaXMubGFuZ3VhZ2VdfSx0cmlnZ2VyRG93bmxvYWRPcGVuOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcGVuQXBpUmF3LGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpLG49e30sbz10aGlzLm5hbWUscj13aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbdF0se3R5cGU6KG4udHlwZXx8InRleHQvcGxhaW4iKSsiO2NoYXJzZXQ9Iisobi5lbmNvZGluZ3x8InV0Zi04Iil9KSk7ZS5ocmVmPXIsZS5kb3dubG9hZD1vfHwiZmlsZSIsZS5jbGljaygpLHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHIpfSxjb3B5T3BlbkFwaTpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT0iYnRuQ29weU9wZW5BcGkiK3RoaXMuYXBpLmlkLG49bmV3IGkuYSgiIyIrZSx7dGV4dDpmdW5jdGlvbigpe3JldHVybiB0Lm9wZW5BcGlSYXd9fSk7bi5vbigic3VjY2VzcyIsKGZ1bmN0aW9uKCl7dmFyIGU9dC5nZXRDdXJyZW50STE4bkluc3RhbmNlKCkubWVzc2FnZS5jb3B5Lm9wZW4uc3VjY2Vzczt0LiRtZXNzYWdlLmluZm8oZSl9KSksbi5vbigiZXJyb3IiLChmdW5jdGlvbihlKXt2YXIgbj10LmdldEN1cnJlbnRJMThuSW5zdGFuY2UoKS5tZXNzYWdlLmNvcHkub3Blbi5mYWlsO3QuJG1lc3NhZ2UuaW5mbyhuKX0pKX19fSxjPW4oIjI4NzciKSx1PU9iamVjdChjLmEpKGEsKGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKCJkaXYiLHtzdGF0aWNDbGFzczoiZG9jdW1lbnQifSxbbigiYS1yb3ciLHtzdGF0aWNTdHlsZTp7Im1hcmdpbi10b3AiOiIxMHB4In19LFtuKCJhLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5IixpZDoiYnRuQ29weU9wZW5BcGkiK3QuYXBpLmlkfX0sW24oImEtaWNvbiIse2F0dHJzOnt0eXBlOiJjb3B5In19KSxuKCJzcGFuIix7ZG9tUHJvcHM6e2lubmVySFRNTDp0Ll9zKHQuJHQoIm9wZW4uY29weSIpKX19LFt0Ll92KCIg5aSNIOWItiAiKV0pXSwxKSxuKCJhLWJ1dHRvbiIse3N0YXRpY1N0eWxlOnsibWFyZ2luLWxlZnQiOiIxMHB4In0sb246e2NsaWNrOnQudHJpZ2dlckRvd25sb2FkT3Blbn19LFtuKCJhLWljb24iLHthdHRyczp7dHlwZToiZG93bmxvYWQifX0pLHQuX3YoIiAiKSxuKCJzcGFuIix7ZG9tUHJvcHM6e2lubmVySFRNTDp0Ll9zKHQuJHQoIm9wZW4uZG93bmxvYWQiKSl9fSxbdC5fdigiIOS4iyDovb0gIildKV0sMSldLDEpLG4oImEtcm93Iix7c3RhdGljU3R5bGU6eyJtYXJnaW4tdG9wIjoiMTBweCJ9LGF0dHJzOntpZDoia25pZmU0akRvY3VtZW50T3BlbkFwaVNob3dFZGl0b3IifX0sW24oImVkaXRvci1zaG93Iix7YXR0cnM6e3ZhbHVlOnQub3BlbkFwaVJhd30sb246e2NoYW5nZTp0LmNoYW5nZX19KV0sMSldLDEpfSksW10sITEsbnVsbCxudWxsLG51bGwpO2UuZGVmYXVsdD11LmV4cG9ydHN9LGIzMTE6ZnVuY3Rpb24odCxlLG4pewovKiEKICogY2xpcGJvYXJkLmpzIHYyLjAuOAogKiBodHRwczovL2NsaXBib2FyZGpzLmNvbS8KICoKICogTGljZW5zZWQgTUlUIMKpIFplbm8gUm9jaGEKICovCnQuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciB0PXsxMzQ6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtuLmQoZSx7ZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybiBifX0pO3ZhciBvPW4oMjc5KSxyPW4ubihvKSxpPW4oMzcwKSxhPW4ubihpKSxjPW4oODE3KSx1PW4ubihjKTtmdW5jdGlvbiBzKHQpe3JldHVybihzPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiB0fSkodCl9ZnVuY3Rpb24gbCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgbz1lW25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fCExLG8uY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsby5rZXksbyl9fXZhciBmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXsoZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX0pKHRoaXMsdCksdGhpcy5yZXNvbHZlT3B0aW9ucyhlKSx0aGlzLmluaXRTZWxlY3Rpb24oKX1yZXR1cm4gZnVuY3Rpb24odCxlLG4pe2UmJmwodC5wcm90b3R5cGUsZSksbiYmbCh0LG4pfSh0LFt7a2V5OiJyZXNvbHZlT3B0aW9ucyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307dGhpcy5hY3Rpb249dC5hY3Rpb24sdGhpcy5jb250YWluZXI9dC5jb250YWluZXIsdGhpcy5lbWl0dGVyPXQuZW1pdHRlcix0aGlzLnRhcmdldD10LnRhcmdldCx0aGlzLnRleHQ9dC50ZXh0LHRoaXMudHJpZ2dlcj10LnRyaWdnZXIsdGhpcy5zZWxlY3RlZFRleHQ9IiJ9fSx7a2V5OiJpbml0U2VsZWN0aW9uIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMudGV4dD90aGlzLnNlbGVjdEZha2UoKTp0aGlzLnRhcmdldCYmdGhpcy5zZWxlY3RUYXJnZXQoKX19LHtrZXk6ImNyZWF0ZUZha2VFbGVtZW50Iix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PSJydGwiPT09ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgiZGlyIik7dGhpcy5mYWtlRWxlbT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZXh0YXJlYSIpLHRoaXMuZmFrZUVsZW0uc3R5bGUuZm9udFNpemU9IjEycHQiLHRoaXMuZmFrZUVsZW0uc3R5bGUuYm9yZGVyPSIwIix0aGlzLmZha2VFbGVtLnN0eWxlLnBhZGRpbmc9IjAiLHRoaXMuZmFrZUVsZW0uc3R5bGUubWFyZ2luPSIwIix0aGlzLmZha2VFbGVtLnN0eWxlLnBvc2l0aW9uPSJhYnNvbHV0ZSIsdGhpcy5mYWtlRWxlbS5zdHlsZVt0PyJyaWdodCI6ImxlZnQiXT0iLTk5OTlweCI7dmFyIGU9d2luZG93LnBhZ2VZT2Zmc2V0fHxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO3JldHVybiB0aGlzLmZha2VFbGVtLnN0eWxlLnRvcD0iIi5jb25jYXQoZSwicHgiKSx0aGlzLmZha2VFbGVtLnNldEF0dHJpYnV0ZSgicmVhZG9ubHkiLCIiKSx0aGlzLmZha2VFbGVtLnZhbHVlPXRoaXMudGV4dCx0aGlzLmZha2VFbGVtfX0se2tleToic2VsZWN0RmFrZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5jcmVhdGVGYWtlRWxlbWVudCgpO3RoaXMuZmFrZUhhbmRsZXJDYWxsYmFjaz1mdW5jdGlvbigpe3JldHVybiB0LnJlbW92ZUZha2UoKX0sdGhpcy5mYWtlSGFuZGxlcj10aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrKXx8ITAsdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoZSksdGhpcy5zZWxlY3RlZFRleHQ9dSgpKGUpLHRoaXMuY29weVRleHQoKSx0aGlzLnJlbW92ZUZha2UoKX19LHtrZXk6InJlbW92ZUZha2UiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5mYWtlSGFuZGxlciYmKHRoaXMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoImNsaWNrIix0aGlzLmZha2VIYW5kbGVyQ2FsbGJhY2spLHRoaXMuZmFrZUhhbmRsZXI9bnVsbCx0aGlzLmZha2VIYW5kbGVyQ2FsbGJhY2s9bnVsbCksdGhpcy5mYWtlRWxlbSYmKHRoaXMuY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuZmFrZUVsZW0pLHRoaXMuZmFrZUVsZW09bnVsbCl9fSx7a2V5OiJzZWxlY3RUYXJnZXQiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5zZWxlY3RlZFRleHQ9dSgpKHRoaXMudGFyZ2V0KSx0aGlzLmNvcHlUZXh0KCl9fSx7a2V5OiJjb3B5VGV4dCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdDt0cnl7dD1kb2N1bWVudC5leGVjQ29tbWFuZCh0aGlzLmFjdGlvbil9Y2F0Y2goZSl7dD0hMX10aGlzLmhhbmRsZVJlc3VsdCh0KX19LHtrZXk6ImhhbmRsZVJlc3VsdCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5lbWl0dGVyLmVtaXQodD8ic3VjY2VzcyI6ImVycm9yIix7YWN0aW9uOnRoaXMuYWN0aW9uLHRleHQ6dGhpcy5zZWxlY3RlZFRleHQsdHJpZ2dlcjp0aGlzLnRyaWdnZXIsY2xlYXJTZWxlY3Rpb246dGhpcy5jbGVhclNlbGVjdGlvbi5iaW5kKHRoaXMpfSl9fSx7a2V5OiJjbGVhclNlbGVjdGlvbiIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnRyaWdnZXImJnRoaXMudHJpZ2dlci5mb2N1cygpLGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpLHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKX19LHtrZXk6ImRlc3Ryb3kiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVGYWtlKCl9fSx7a2V5OiJhY3Rpb24iLHNldDpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXToiY29weSI7aWYodGhpcy5fYWN0aW9uPXQsImNvcHkiIT09dGhpcy5fYWN0aW9uJiYiY3V0IiE9PXRoaXMuX2FjdGlvbil0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgImFjdGlvbiIgdmFsdWUsIHVzZSBlaXRoZXIgImNvcHkiIG9yICJjdXQiJyl9LGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hY3Rpb259fSx7a2V5OiJ0YXJnZXQiLHNldDpmdW5jdGlvbih0KXtpZih2b2lkIDAhPT10KXtpZighdHx8Im9iamVjdCIhPT1zKHQpfHwxIT09dC5ub2RlVHlwZSl0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgInRhcmdldCIgdmFsdWUsIHVzZSBhIHZhbGlkIEVsZW1lbnQnKTtpZigiY29weSI9PT10aGlzLmFjdGlvbiYmdC5oYXNBdHRyaWJ1dGUoImRpc2FibGVkIikpdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkICJ0YXJnZXQiIGF0dHJpYnV0ZS4gUGxlYXNlIHVzZSAicmVhZG9ubHkiIGluc3RlYWQgb2YgImRpc2FibGVkIiBhdHRyaWJ1dGUnKTtpZigiY3V0Ij09PXRoaXMuYWN0aW9uJiYodC5oYXNBdHRyaWJ1dGUoInJlYWRvbmx5Iil8fHQuaGFzQXR0cmlidXRlKCJkaXNhYmxlZCIpKSl0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgInRhcmdldCIgYXR0cmlidXRlLiBZb3UgY2FuXCd0IGN1dCB0ZXh0IGZyb20gZWxlbWVudHMgd2l0aCAicmVhZG9ubHkiIG9yICJkaXNhYmxlZCIgYXR0cmlidXRlcycpO3RoaXMuX3RhcmdldD10fX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RhcmdldH19XSksdH0oKTtmdW5jdGlvbiBwKHQpe3JldHVybihwPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiB0fSkodCl9ZnVuY3Rpb24gaCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgbz1lW25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fCExLG8uY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsby5rZXksbyl9fWZ1bmN0aW9uIGQodCxlKXtyZXR1cm4oZD1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0pKHQsZSl9ZnVuY3Rpb24geSh0KXt2YXIgZT1mdW5jdGlvbigpe2lmKCJ1bmRlZmluZWQiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoImZ1bmN0aW9uIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBuLG89Zyh0KTtpZihlKXt2YXIgcj1nKHRoaXMpLmNvbnN0cnVjdG9yO249UmVmbGVjdC5jb25zdHJ1Y3Qobyxhcmd1bWVudHMscil9ZWxzZSBuPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBtKHRoaXMsbil9fWZ1bmN0aW9uIG0odCxlKXtyZXR1cm4hZXx8Im9iamVjdCIhPT1wKGUpJiYiZnVuY3Rpb24iIT10eXBlb2YgZT9mdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7cmV0dXJuIHR9KHQpOmV9ZnVuY3Rpb24gZyh0KXtyZXR1cm4oZz1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSkodCl9ZnVuY3Rpb24gdih0LGUpe3ZhciBuPSJkYXRhLWNsaXBib2FyZC0iLmNvbmNhdCh0KTtpZihlLmhhc0F0dHJpYnV0ZShuKSlyZXR1cm4gZS5nZXRBdHRyaWJ1dGUobil9dmFyIGI9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJmQodCxlKX0obix0KTt2YXIgZT15KG4pO2Z1bmN0aW9uIG4odCxvKXt2YXIgcjtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX0odGhpcyxuKSwocj1lLmNhbGwodGhpcykpLnJlc29sdmVPcHRpb25zKG8pLHIubGlzdGVuQ2xpY2sodCkscn1yZXR1cm4gZnVuY3Rpb24odCxlLG4pe2UmJmgodC5wcm90b3R5cGUsZSksbiYmaCh0LG4pfShuLFt7a2V5OiJyZXNvbHZlT3B0aW9ucyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307dGhpcy5hY3Rpb249ImZ1bmN0aW9uIj09dHlwZW9mIHQuYWN0aW9uP3QuYWN0aW9uOnRoaXMuZGVmYXVsdEFjdGlvbix0aGlzLnRhcmdldD0iZnVuY3Rpb24iPT10eXBlb2YgdC50YXJnZXQ/dC50YXJnZXQ6dGhpcy5kZWZhdWx0VGFyZ2V0LHRoaXMudGV4dD0iZnVuY3Rpb24iPT10eXBlb2YgdC50ZXh0P3QudGV4dDp0aGlzLmRlZmF1bHRUZXh0LHRoaXMuY29udGFpbmVyPSJvYmplY3QiPT09cCh0LmNvbnRhaW5lcik/dC5jb250YWluZXI6ZG9jdW1lbnQuYm9keX19LHtrZXk6Imxpc3RlbkNsaWNrIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzO3RoaXMubGlzdGVuZXI9YSgpKHQsImNsaWNrIiwoZnVuY3Rpb24odCl7cmV0dXJuIGUub25DbGljayh0KX0pKX19LHtrZXk6Im9uQ2xpY2siLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXQuZGVsZWdhdGVUYXJnZXR8fHQuY3VycmVudFRhcmdldDt0aGlzLmNsaXBib2FyZEFjdGlvbiYmKHRoaXMuY2xpcGJvYXJkQWN0aW9uPW51bGwpLHRoaXMuY2xpcGJvYXJkQWN0aW9uPW5ldyBmKHthY3Rpb246dGhpcy5hY3Rpb24oZSksdGFyZ2V0OnRoaXMudGFyZ2V0KGUpLHRleHQ6dGhpcy50ZXh0KGUpLGNvbnRhaW5lcjp0aGlzLmNvbnRhaW5lcix0cmlnZ2VyOmUsZW1pdHRlcjp0aGlzfSl9fSx7a2V5OiJkZWZhdWx0QWN0aW9uIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdigiYWN0aW9uIix0KX19LHtrZXk6ImRlZmF1bHRUYXJnZXQiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXYoInRhcmdldCIsdCk7aWYoZSlyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKX19LHtrZXk6ImRlZmF1bHRUZXh0Iix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdigidGV4dCIsdCl9fSx7a2V5OiJkZXN0cm95Iix2YWx1ZTpmdW5jdGlvbigpe3RoaXMubGlzdGVuZXIuZGVzdHJveSgpLHRoaXMuY2xpcGJvYXJkQWN0aW9uJiYodGhpcy5jbGlwYm9hcmRBY3Rpb24uZGVzdHJveSgpLHRoaXMuY2xpcGJvYXJkQWN0aW9uPW51bGwpfX1dLFt7a2V5OiJpc1N1cHBvcnRlZCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06WyJjb3B5IiwiY3V0Il0sZT0ic3RyaW5nIj09dHlwZW9mIHQ/W3RdOnQsbj0hIWRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN1cHBvcnRlZDtyZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbih0KXtuPW4mJiEhZG9jdW1lbnQucXVlcnlDb21tYW5kU3VwcG9ydGVkKHQpfSkpLG59fV0pLG59KHIoKSl9LDgyODpmdW5jdGlvbih0KXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIEVsZW1lbnQmJiFFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzKXt2YXIgZT1FbGVtZW50LnByb3RvdHlwZTtlLm1hdGNoZXM9ZS5tYXRjaGVzU2VsZWN0b3J8fGUubW96TWF0Y2hlc1NlbGVjdG9yfHxlLm1zTWF0Y2hlc1NlbGVjdG9yfHxlLm9NYXRjaGVzU2VsZWN0b3J8fGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yfXQuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2Zvcig7dCYmOSE9PXQubm9kZVR5cGU7KXtpZigiZnVuY3Rpb24iPT10eXBlb2YgdC5tYXRjaGVzJiZ0Lm1hdGNoZXMoZSkpcmV0dXJuIHQ7dD10LnBhcmVudE5vZGV9fX0sNDM4OmZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDgyOCk7ZnVuY3Rpb24gcih0LGUsbixvLHIpe3ZhciBhPWkuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiB0LmFkZEV2ZW50TGlzdGVuZXIobixhLHIpLHtkZXN0cm95OmZ1bmN0aW9uKCl7dC5yZW1vdmVFdmVudExpc3RlbmVyKG4sYSxyKX19fWZ1bmN0aW9uIGkodCxlLG4scil7cmV0dXJuIGZ1bmN0aW9uKG4pe24uZGVsZWdhdGVUYXJnZXQ9byhuLnRhcmdldCxlKSxuLmRlbGVnYXRlVGFyZ2V0JiZyLmNhbGwodCxuKX19dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuLG8saSl7cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIHQuYWRkRXZlbnRMaXN0ZW5lcj9yLmFwcGx5KG51bGwsYXJndW1lbnRzKToiZnVuY3Rpb24iPT10eXBlb2Ygbj9yLmJpbmQobnVsbCxkb2N1bWVudCkuYXBwbHkobnVsbCxhcmd1bWVudHMpOigic3RyaW5nIj09dHlwZW9mIHQmJih0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodCkpLEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbCh0LChmdW5jdGlvbih0KXtyZXR1cm4gcih0LGUsbixvLGkpfSkpKX19LDg3OTpmdW5jdGlvbih0LGUpe2Uubm9kZT1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwIT09dCYmdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50JiYxPT09dC5ub2RlVHlwZX0sZS5ub2RlTGlzdD1mdW5jdGlvbih0KXt2YXIgbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCk7cmV0dXJuIHZvaWQgMCE9PXQmJigiW29iamVjdCBOb2RlTGlzdF0iPT09bnx8IltvYmplY3QgSFRNTENvbGxlY3Rpb25dIj09PW4pJiYibGVuZ3RoImluIHQmJigwPT09dC5sZW5ndGh8fGUubm9kZSh0WzBdKSl9LGUuc3RyaW5nPWZ1bmN0aW9uKHQpe3JldHVybiJzdHJpbmciPT10eXBlb2YgdHx8dCBpbnN0YW5jZW9mIFN0cmluZ30sZS5mbj1mdW5jdGlvbih0KXtyZXR1cm4iW29iamVjdCBGdW5jdGlvbl0iPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpfX0sMzcwOmZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDg3OSkscj1uKDQzOCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuKXtpZighdCYmIWUmJiFuKXRocm93IG5ldyBFcnJvcigiTWlzc2luZyByZXF1aXJlZCBhcmd1bWVudHMiKTtpZighby5zdHJpbmcoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBTdHJpbmciKTtpZighby5mbihuKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJUaGlyZCBhcmd1bWVudCBtdXN0IGJlIGEgRnVuY3Rpb24iKTtpZihvLm5vZGUodCkpcmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdC5hZGRFdmVudExpc3RlbmVyKGUsbikse2Rlc3Ryb3k6ZnVuY3Rpb24oKXt0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxuKX19fSh0LGUsbik7aWYoby5ub2RlTGlzdCh0KSlyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3JldHVybiBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHQsKGZ1bmN0aW9uKHQpe3QuYWRkRXZlbnRMaXN0ZW5lcihlLG4pfSkpLHtkZXN0cm95OmZ1bmN0aW9uKCl7QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCh0LChmdW5jdGlvbih0KXt0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxuKX0pKX19fSh0LGUsbik7aWYoby5zdHJpbmcodCkpcmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gcihkb2N1bWVudC5ib2R5LHQsZSxuKX0odCxlLG4pO3Rocm93IG5ldyBUeXBlRXJyb3IoIkZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBTdHJpbmcsIEhUTUxFbGVtZW50LCBIVE1MQ29sbGVjdGlvbiwgb3IgTm9kZUxpc3QiKX19LDgxNzpmdW5jdGlvbih0KXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU7aWYoIlNFTEVDVCI9PT10Lm5vZGVOYW1lKXQuZm9jdXMoKSxlPXQudmFsdWU7ZWxzZSBpZigiSU5QVVQiPT09dC5ub2RlTmFtZXx8IlRFWFRBUkVBIj09PXQubm9kZU5hbWUpe3ZhciBuPXQuaGFzQXR0cmlidXRlKCJyZWFkb25seSIpO258fHQuc2V0QXR0cmlidXRlKCJyZWFkb25seSIsIiIpLHQuc2VsZWN0KCksdC5zZXRTZWxlY3Rpb25SYW5nZSgwLHQudmFsdWUubGVuZ3RoKSxufHx0LnJlbW92ZUF0dHJpYnV0ZSgicmVhZG9ubHkiKSxlPXQudmFsdWV9ZWxzZXt0Lmhhc0F0dHJpYnV0ZSgiY29udGVudGVkaXRhYmxlIikmJnQuZm9jdXMoKTt2YXIgbz13aW5kb3cuZ2V0U2VsZWN0aW9uKCkscj1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO3Iuc2VsZWN0Tm9kZUNvbnRlbnRzKHQpLG8ucmVtb3ZlQWxsUmFuZ2VzKCksby5hZGRSYW5nZShyKSxlPW8udG9TdHJpbmcoKX1yZXR1cm4gZX19LDI3OTpmdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7fWUucHJvdG90eXBlPXtvbjpmdW5jdGlvbih0LGUsbil7dmFyIG89dGhpcy5lfHwodGhpcy5lPXt9KTtyZXR1cm4ob1t0XXx8KG9bdF09W10pKS5wdXNoKHtmbjplLGN0eDpufSksdGhpc30sb25jZTpmdW5jdGlvbih0LGUsbil7dmFyIG89dGhpcztmdW5jdGlvbiByKCl7by5vZmYodCxyKSxlLmFwcGx5KG4sYXJndW1lbnRzKX1yZXR1cm4gci5fPWUsdGhpcy5vbih0LHIsbil9LGVtaXQ6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLG49KCh0aGlzLmV8fCh0aGlzLmU9e30pKVt0XXx8W10pLnNsaWNlKCksbz0wLHI9bi5sZW5ndGg7bzxyO28rKyluW29dLmZuLmFwcGx5KG5bb10uY3R4LGUpO3JldHVybiB0aGlzfSxvZmY6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmV8fCh0aGlzLmU9e30pLG89blt0XSxyPVtdO2lmKG8mJmUpZm9yKHZhciBpPTAsYT1vLmxlbmd0aDtpPGE7aSsrKW9baV0uZm4hPT1lJiZvW2ldLmZuLl8hPT1lJiZyLnB1c2gob1tpXSk7cmV0dXJuIHIubGVuZ3RoP25bdF09cjpkZWxldGUgblt0XSx0aGlzfX0sdC5leHBvcnRzPWUsdC5leHBvcnRzLlRpbnlFbWl0dGVyPWV9fSxlPXt9O2Z1bmN0aW9uIG4obyl7aWYoZVtvXSlyZXR1cm4gZVtvXS5leHBvcnRzO3ZhciByPWVbb109e2V4cG9ydHM6e319O3JldHVybiB0W29dKHIsci5leHBvcnRzLG4pLHIuZXhwb3J0c31yZXR1cm4gbi5uPWZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBuLmQoZSx7YTplfSksZX0sbi5kPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBvIGluIGUpbi5vKGUsbykmJiFuLm8odCxvKSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbyx7ZW51bWVyYWJsZTohMCxnZXQ6ZVtvXX0pfSxuLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LG4oMTM0KX0oKS5kZWZhdWx0fX1dKTs=`
)






